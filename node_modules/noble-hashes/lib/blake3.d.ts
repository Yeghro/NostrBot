import * as blake2 from './_blake2';
import { Input } from './utils';
export declare type Blake3Opts = {
    dkLen?: number;
    key?: Input;
    context?: Input;
};
declare class BLAKE3 extends blake2.BLAKE2<BLAKE3> {
    private IV;
    private flags;
    private state;
    private chunkPos;
    private chunksDone;
    private stack;
    constructor(opts?: Blake3Opts, flags?: number);
    protected get(): never[];
    protected set(): void;
    private b2Compress;
    protected compress(buf: Uint32Array, bufPos?: number, isLast?: boolean): void;
    _cloneInto(to?: BLAKE3): BLAKE3;
    _clean(): void;
    private b2CompressOut;
    _writeDigest(buf: Uint8Array): void;
    digest(): Uint8Array;
}
export declare const blake3: {
    (msg: Input, opts?: Blake3Opts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: Blake3Opts): import("./utils").Hash<BLAKE3>;
    init: (opts: Blake3Opts) => import("./utils").Hash<BLAKE3>;
};
export {};
