import { Hash, Input } from './utils';
import { Keccak, ShakeOpts } from './sha3';
export declare type cShakeOpts = ShakeOpts & {
    personalization?: Input;
    NISTfn?: Input;
};
export declare const cshake128: {
    (msg: Input, opts?: cShakeOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: cShakeOpts): Hash<Keccak>;
    init: (opts: cShakeOpts) => Hash<Keccak>;
};
export declare const cshake256: {
    (msg: Input, opts?: cShakeOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: cShakeOpts): Hash<Keccak>;
    init: (opts: cShakeOpts) => Hash<Keccak>;
};
declare class KMAC extends Keccak {
    blockLen: number;
    outputLen: number;
    constructor(blockLen: number, outputLen: number, key: Input, opts?: cShakeOpts);
    _writeDigest(buf: Uint8Array): void;
    _cloneInto(to?: KMAC): KMAC;
}
export declare const kmac128: {
    (key: Input, message: Input, opts?: cShakeOpts | undefined): Uint8Array;
    create(key: Input, opts?: cShakeOpts): KMAC;
    init: (key: Input, opts?: cShakeOpts) => KMAC;
};
export declare const kmac256: {
    (key: Input, message: Input, opts?: cShakeOpts | undefined): Uint8Array;
    create(key: Input, opts?: cShakeOpts): KMAC;
    init: (key: Input, opts?: cShakeOpts) => KMAC;
};
export declare type KangarooOpts = {
    dkLen?: number;
    personalization?: Input;
};
declare class KangarooTwelve extends Hash<KangarooTwelve> {
    private rounds;
    private leafBlockLen;
    private leafOutputLen;
    outputLen: number;
    blockLen: number;
    private finished;
    private rootHash;
    private leafHash?;
    private length;
    private personalization;
    constructor(rounds?: number, leafBlockLen?: number, leafOutputLen?: number, opts?: KangarooOpts);
    newLeaf(): Keccak;
    update(data: Input): this;
    _writeDigest(buf: Uint8Array): void;
    digest(): Uint8Array;
    _clean(): void;
    _cloneInto(to?: KangarooTwelve): KangarooTwelve;
}
export declare const k12: {
    (msg: Input, opts?: KangarooOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: KangarooOpts): Hash<KangarooTwelve>;
    init: (opts: KangarooOpts) => Hash<KangarooTwelve>;
};
export declare const m14: {
    (msg: Input, opts?: KangarooOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: KangarooOpts): Hash<KangarooTwelve>;
    init: (opts: KangarooOpts) => Hash<KangarooTwelve>;
};
export {};
