import { Hash, Input } from './utils';
export declare class Keccak extends Hash<Keccak> {
    blockLen: number;
    suffix: number;
    outputLen: number;
    private rounds;
    protected state: Uint8Array;
    private pos;
    protected finished: boolean;
    protected state32: Uint32Array;
    constructor(blockLen: number, suffix: number, outputLen: number, rounds?: number);
    private keccak;
    update(data: Input): this;
    _writeDigest(out: Uint8Array): void;
    digest(): Uint8Array;
    _clean(): void;
    _cloneInto(to?: Keccak): Keccak;
}
export declare const sha3_224: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const sha3_256: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const sha3_384: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const sha3_512: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const keccak_224: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const keccak_256: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const keccak_384: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare const keccak_512: {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash<Keccak>;
    init: () => Hash<Keccak>;
};
export declare type ShakeOpts = {
    dkLen?: number;
};
export declare const shake128: {
    (msg: Input, opts?: ShakeOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: ShakeOpts): Hash<Keccak>;
    init: (opts: ShakeOpts) => Hash<Keccak>;
};
export declare const shake256: {
    (msg: Input, opts?: ShakeOpts | undefined): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: ShakeOpts): Hash<Keccak>;
    init: (opts: ShakeOpts) => Hash<Keccak>;
};
